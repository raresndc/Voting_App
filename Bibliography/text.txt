latex

SUMMARIES OF REFERENCES
-----------------------

1) Fowler, M., & Lewis, J. (2014). Microservices.
Link: https://martinfowler.com/articles/microservices.html
Summary:
Describes foundational concepts of microservices, including decoupled components, lightweight protocols, and continuous delivery strategies.

2) Richardson, C. (2018). Microservices Patterns. Addison-Wesley.
Summary:
Explores patterns and best practices for building production-ready microservices in Java, focusing on event-driven collaboration, transaction management, and service discovery.

3) Google Cloud. (n.d.). Cloud Vision API Documentation.
Link: https://cloud.google.com/vision
Summary:
Official documentation on using Google’s image analysis services, including text extraction (OCR), facial detection, landmark detection, and more.

4) Smith, R. (2007). An overview of the Tesseract OCR engine. In Proceedings of the Ninth International Conference on Document Analysis and Recognition (Vol. 2, pp. 629–633). IEEE.
Summary:
Technical overview of Tesseract's internal architecture, training approaches, and performance considerations for OCR tasks.

5) Amazon. (n.d.). Amazon Rekognition Developer Guide.
Link: https://docs.aws.amazon.com/rekognition/
Summary:
Shows how to integrate face recognition, object detection, and labeling into applications using AWS Rekognition’s API, including authentication and region setup.

6) Microsoft. (n.d.). Azure Face API Documentation.
Link: https://learn.microsoft.com/azure/cognitive-services/face/
Summary:
Explains how to detect, identify, and compare faces with Azure Cognitive Services. Includes guides on usage, pricing tiers, and code samples.

7) Jones, M., Bradley, J., & Sakimura, N. (2015). JSON Web Token (JWT). IETF, RFC 7519.
Link: https://datatracker.ietf.org/doc/html/rfc7519
Summary:
Defines the JWT standard for transmitting claims between parties as a secure, compact JSON object, widely used for web authentication and authorization.

8) Tailwind Labs. (n.d.). Tailwind CSS Documentation.
Link: https://tailwindcss.com/
Summary:
Describes utility-first CSS design principles, configuration options, and usage patterns to rapidly build custom UIs without writing extensive custom CSS.

9) Spring Security. (n.d.). Reference Documentation for Spring Security.
Link: https://spring.io/projects/spring-security
Summary:
Covers best practices for securing Java/Spring-based applications, including OAuth2 and JWT integration, form-based authentication, and method-level security.

10) National Institute of Standards and Technology (NIST). (2019). Digital Identity Guidelines (Special Publication 800-63-3).
Link: https://csrc.nist.gov/publications/detail/sp/800-63/3/final
Summary:
Offers U.S. federal government guidelines on identity proofing, authentication, and federation, including assurance levels and lifecycle management.

11) Hill, S. (2020). Microservices in Java: Best Practices and Patterns. Packt Publishing.
Summary:
Provides practical advice on designing and implementing microservices in Java, focusing on domain-driven design, communication strategies, and security.

12) Redhat. (n.d.). Kubernetes Documentation.
Link: https://www.redhat.com/en/topics/containers/kubernetes
Summary:
Overview of Kubernetes basics, including container orchestration, cluster management, and deployment strategies as provided by Red Hat’s resources.

13) Docker Inc. (n.d.). Docker Documentation.
Link: https://docs.docker.com/
Summary:
Walkthrough of containerization concepts, Dockerfile syntax, Docker Compose, and guidelines for building portable, reproducible containers.

14) Newman, S. (2019). Building Microservices: Designing Fine-Grained Systems (2nd ed.). O’Reilly Media.
Summary:
Classic reference that dives deeper into microservice decomposition, CI/CD, communication patterns, and infrastructure automation in microservices architecture.

15) IBM. (n.d.). IBM Cloud Kubernetes Service.
Link: https://cloud.ibm.com/kubernetes/catalog
Summary:
Describes IBM’s managed Kubernetes solution, detailing cluster provisioning, node management, security, and integration with IBM Cloud services.

16) Amazon. (n.d.). Amazon Elastic Kubernetes Service.
Link: https://aws.amazon.com/eks/
Summary:
AWS’s managed Kubernetes offering for automatically scaling containerized applications, with features like Fargate integration and IAM roles for service accounts.

17) Pivotal. (n.d.). Spring Boot Reference Guide.
Link: https://docs.spring.io/spring-boot/docs/current/reference/html/
Summary:
Details how to build production-grade Spring-based microservices with opinionated defaults, embedded servers, and simplified dependency management.

18) Oracle. (n.d.). Java Platform, Enterprise Edition (Java EE) Documentation.
Link: https://www.oracle.com/java/technologies/java-ee-glance.html
Summary:
Covers APIs and architecture for building enterprise Java applications (JAX-RS, CDI, EJB, etc.), serving as a basis for microservice design in some contexts.

19) Dehghantanha, A., & Dargahi, T. (2019). Cyber Threat Intelligence for Microservices. Springer.
Summary:
Academic text examining cyber threats in container-based microservice architectures and how to mitigate vulnerabilities using dynamic analysis and threat modeling.

20) ISO/IEC. (2017). ISO/IEC 27001:2013 Information Security Management.
Summary:
International standard for information security management systems, relevant to securing data in distributed microservice environments.

21) Kroonenberg, P. M. (2008). Applied Multiway Data Analysis. John Wiley & Sons.
Summary:
Though not microservice-specific, discusses techniques for multi-dimensional data analysis, beneficial for election or voter analytics in large datasets.

22) Bass, L., Clements, P., & Kazman, R. (2012). Software Architecture in Practice (3rd ed.). Addison-Wesley.
Summary:
Introduces foundational software architecture concepts and methods, including architectural evaluation, relevant to microservices as an emerging style.

23) Microsoft. (n.d.). Azure Architecture Center.
Link: https://learn.microsoft.com/azure/architecture/
Summary:
Guides on designing secure, scalable cloud solutions on Azure, featuring reference architectures and best practices for microservices.

24) Google Cloud. (n.d.). Google Cloud Architecture Center.
Link: https://cloud.google.com/architecture
Summary:
Provides reference guides for deploying microservices on Google Cloud (GKE, Anthos), including patterns for scalability, security, and reliability.

25) Fielding, R. T. (2000). Architectural Styles and the Design of Network-Based Software Architectures. (Doctoral dissertation, University of California, Irvine).
Summary:
Seminal work describing REST (Representational State Transfer), a core principle for designing stateless communication in microservices.

26) Morales, J. (2021). Implementing Domain-Driven Design in Java Microservices. Manning Publications.
Summary:
Discusses domain modeling, bounded contexts, and how to apply DDD concepts to microservices built with Java frameworks like Spring Boot.

27) Nginx. (n.d.). Nginx Ingress Controller for Kubernetes Documentation.
Link: https://kubernetes.github.io/ingress-nginx/
Summary:
Explains how to configure a Kubernetes Ingress Controller using Nginx for load balancing, SSL termination, and routing in microservices.

28) InfoQ. (n.d.). Microservices Resource Page.
Link: https://www.infoq.com/microservices/
Summary:
Collection of articles, videos, and case studies focusing on microservices architecture, patterns, pitfalls, and success stories.

29) Oracle. (n.d.). Java 17 Documentation.
Link: https://docs.oracle.com/en/java/javase/17/
Summary:
Covers the most recent LTS release of Java, including new language features (switch expressions, records, sealed classes) beneficial for microservice code.

30) IEEE Standards Association. (2020). IEEE 23026-2020 - Systems and software engineering — Engineering and management of websites for systems, software, and services information. IEEE.
Summary:
Specifies guidelines for managing and engineering websites, focusing on quality attributes, governance, and maintainability in service-based architectures.

