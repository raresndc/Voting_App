openapi: 3.0.3
info:
  title: E-Voting Microservices API
  version: 1.0.0
servers:
  - url: http://document-service:8080
    description: Document Service
  - url: http://identity-verification-service:8081
    description: Identity Verification Service
  - url: http://auth-service:8082
    description: Authentication & Blind Signature Service
  - url: http://voting-service:8083
    description: Voting Service

tags:
  - name: Document Service
  - name: Identity Verification Service
  - name: Auth Service
  - name: Voting Service

paths:
  /api/id-photo/{userId}:
    post:
      tags:
        - Document Service
      summary: Upload ID document image for OCR processing
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Extraction successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentData'
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      tags:
        - Document Service
      summary: Retrieve extracted data for a given user ID
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OCR data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentData'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/documents/{id}:
    get:
      tags:
        - Document Service
      summary: Retrieve stored document metadata by document ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentMetadata'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/face-photo/{userId}:
    post:
      tags:
        - Identity Verification Service
      summary: Upload live face photo for comparison
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Face image stored
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      tags:
        - Identity Verification Service
      summary: Retrieve stored face image metadata
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Face metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceMetadata'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/face-compare/{userId}:
    post:
      tags:
        - Identity Verification Service
      summary: Compare document photo against live face
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Face match result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceMatchResult'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/auth/login-super-user:
    post:
      tags:
        - Auth Service
      summary: Super-user login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: JWT tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/verify:
    post:
      tags:
        - Auth Service
      summary: Verify user credentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyRequest'
      responses:
        '200':
          description: Verification successful
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/logout:
    post:
      tags:
        - Auth Service
      summary: Invalidate user session
      responses:
        '204':
          description: Logged out

  /api/auth/refresh-token:
    post:
      tags:
        - Auth Service
      summary: Refresh JWT access token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: New access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'

  /api/auth/profile:
    get:
      tags:
        - Auth Service
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /api/auth/politicalParty:
    get:
      tags:
        - Auth Service
      summary: List political parties
      responses:
        '200':
          description: List of parties
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Party'

  /api/auth/token:
    post:
      tags:
        - Auth Service
      summary: Retrieve public blind-signature parameters
      responses:
        '200':
          description: RSA public key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlindKey'

  /api/auth/{userId}/vote:
    post:
      tags:
        - Auth Service
      summary: Issue a blind signature for a vote token
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlindedTokenRequest'
      responses:
        '200':
          description: Blinded signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlindedSignature'
        '409':
          description: Token already issued

  /api/auth/verify-candidate:
    post:
      tags:
        - Auth Service
      summary: Verify candidate eligibility
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas<CandidateVerificationRequest>'
      responses:
        '200':
          description: Candidate verified

  /api/auth/{candidateId}:
    put:
      tags:
        - Auth Service
      summary: Update candidate information
      parameters:
        - in: path
          name: candidateId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateUpdate'
      responses:
        '200':
          description: Candidate updated

  /api/votes/cast:
    post:
      tags:
        - Voting Service
      summary: Cast a vote on the blockchain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteCastRequest'
      responses:
        '200':
          description: Vote recorded on chain
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/votes/verify:
    post:
      tags:
        - Voting Service
      summary: Verify vote token authenticity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas<TokenVerificationRequest>'
      responses:
        '200':
          description: Token valid
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/votes/hasVoted:
    get:
      tags:
        - Voting Service
      summary: Check if a vote token has been used
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usage status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas<UsageStatus>'

  /api/votes/summaries:
    get:
      tags:
        - Voting Service
      summary: Get vote summaries for all candidates
      responses:
        '200':
          description: List of vote counts per candidate
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas<VoteSummary>'

  /api/votes/count/{candidateId}:
    get:
      tags:
        - Voting Service
      summary: Get vote count for a specific candidate
      parameters:
        - in: path
          name: candidateId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Vote count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas<VoteCount>'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    BadRequest:
      description: Invalid input
    Unauthorized:
      description: Authentication failed
    NotFound:
      description: Resource not found

  schemas:
    DocumentData:
      type: object
      properties:
        serie:
          type: string
        number:
          type: string
        name:
          type: string
        cnp:
          type: string
        validFrom:
          type: string
          format: date
        validTo:
          type: string
          format: date
    DocumentMetadata:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        uploadedAt:
          type: string
          format: date-time
    FaceMetadata:
      type: object
      properties:
        userId:
          type: string
        storedAt:
          type: string
          format: date-time
    FaceMatchResult:
      type: object
      properties:
        matched:
          type: boolean
        confidence:
          type: number
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    VerifyRequest:
      type: object
      properties:
        username:
          type: string
        code:
          type: string
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
    UserProfile:
      type: object
      properties:
        userId:
          type: string
        roles:
          type: array
          items:
            type: string
    Party:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    BlindKey:
      type: object
      properties:
        n:
          type: string
        e:
          type: integer
    BlindedTokenRequest:
      type: object
      properties:
        blindedMessage:
          type: string
    BlindedSignature:
      type: object
      properties:
        blindedSignature:
          type: string
    CandidateVerificationRequest:
      type: object
      properties:
        candidateId:
          type: string
    CandidateUpdate:
      type: object
      properties:
        manifesto:
          type: string
    VoteCastRequest:
      type: object
      properties:
        token:
          type: string
        candidateId:
          type: string
    TokenVerificationRequest:
      type: object
      properties:
        token:
          type: string
        signature:
          type: string
    UsageStatus:
      type: object
      properties:
        hasVoted:
          type: boolean
    VoteSummary:
      type: object
      properties:
        candidateId:
          type: string
        count:
          type: integer
    VoteCount:
      type: object
      properties:
        candidateId:
          type: string
        count:
          type: integer
