verificare cnp:

sex - prima cifra in conformitate cu poza
codul de judet in conformitate cu loc de nastere

You’re describing exactly the kind of unlinkable, anonymous credential system that Chaum’s blind‐signature scheme was designed for. In a nutshell the flow looks like this:

User authenticates with your service (so you know they’re a valid voter).

Your service and the user run a blind‐signature protocol:

The user picks a fresh random value $r$ (this is their voting token).

They “blind” it with a random factor and send you the blinded value $B(r)$.

You sign $B(r)$ with your private key, returning a signature $\sigma(B(r))$.

The user “unblinds” it to get $\sigma(r)$, a valid signature on the unblinded token.

At no point does your server learn $r$, because it only ever sees the blinded version.

The user now holds a pair $(r,,\sigma(r))$ that proves “this token was issued by the official authority,” yet you can’t link $r$ back to their identity.

On‐chain, the user calls your voting smart contract and submits:

Their serial number $r$,

The signature $\sigma(r)$,

A zero‐knowledge “nullifier” or proof (e.g. a hash of $r) to prevent double‐voting without revealing $r on‐chain more than once.

The contract checks that $\sigma(r)$ is valid under your public key and that the nullifier isn’t yet spent. If both pass, it records the vote and marks the nullifier “used.”

Why this meets your goals
Zero‐knowledge / unlinkability
Your backend never sees the actual vote token $r`. It only sees the blinded version and signs that. Later, it can’t correlate $\sigma(r)$ back to the authentication event.

No personal data on‐chain
Votes are cast with $(r,\sigma(r))$ and a nullifier, not usernames or emails.

Single‐use
By deriving a unique nullifier from $r(e.g.H(r‖“voting”)`), the smart contract can prevent double‐spends without ever learning your user’s identity.

High-level Java sketch
You can leverage BouncyCastle’s RSA‐blinding API, or roll your own on top of Java’s BigInteger. Here’s a barebones outline using BouncyCastle:

java
Copy
Edit
// 1) On your JwtService (or separate key-management bean):
@Service
public class BlindSigningService {
  private final PrivateKey rsaPriv;      // load from JKS or PEM
  private final PublicKey  rsaPub;

  public BlindSigningService(@Value("${voting.rsa.key}") KeyPair keys) {
    this.rsaPriv = keys.getPrivate();
    this.rsaPub  = keys.getPublic();
  }

  public byte[] signBlinded(byte[] blindedMsg) {
    RSABlindingEngine engine = new RSABlindingEngine();
    engine.init(true, new ParametersWithRandom(
       PrivateKeyFactory.createKey(rsaPriv.getEncoded()), 
       new SecureRandom()
    ));
    return engine.processBlock(blindedMsg, 0, blindedMsg.length);
  }

  public PublicKey getPublicKey() {
    return rsaPub;
  }
}
java
Copy
Edit
// 2) In your AuthService.forgotPassword (after auth):
//    - expose rsaPub to the frontend so it can blind messages.
//    - add an endpoint to sign the blinded token.
@PostMapping("/auth/issue‐blind‐sig")
public byte[] issueBlindSig(@RequestBody byte[] blinded) {
  return blindSigningService.signBlinded(blinded);
}
js
Copy
Edit
/* 3) In your JS client (after login):
   a) pick r = random 256-bit BigInt
   b) compute blinded = Blind(r, rsaPub, randomFactor)
   c) POST blinded → /auth/issue-blind-sig  →  σ_blinded
   d) unblind:  σ(r) = Unblind(σ_blinded, randomFactor, rsaPub)
   e) Keep (r, σ(r)) locally as your vote credential.
*/
solidity
Copy
Edit
// 4) In your Solidity voting contract:
function vote(uint256 r, bytes memory sig, bytes32 nullifier) external {
  require(!usedNullifier[nullifier], "Already voted");
  require(RSA.verify(r, sig, authorityPubN, authorityPubE), "Bad signature");
  usedNullifier[nullifier] = true;
  // tally vote for r (or map r → candidate choice)
}
Alternative advanced approaches
Group signatures (e.g. BBS+): server issues a group credential; on‐chain you verify a group sig, so the signer is anonymous among all users.

Anon credentials / CL Signatures (Idemix, Hyperledger Ursa): richer ZK proofs and attributes, but more complex.

ZK‐SNARK membership proofs: you publish a Merkle root of all valid users; client proves membership in zero‐knowledge to the contract.

Next steps
Pick your primitive (blind‐RSA is simplest).

Generate an RSA key‐pair (4096 bit) and load into your Spring Boot (@Value from Keystore).

Add endpoints: one to fetch the public key, one to sign a blinded token.

Implement the client‐side blinding/unblinding in your web or mobile front‐end.

Write the on‐chain verifier (or use an existing library for RSA‐SNARK in Solidity).

This gives you a fully unlinkable, privacy‐preserving voting token: your backend confirms “yes, this is a real user” yet never learns the vote identifier itself.